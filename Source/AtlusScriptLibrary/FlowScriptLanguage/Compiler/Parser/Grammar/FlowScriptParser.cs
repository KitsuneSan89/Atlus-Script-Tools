//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Paul\source\repos\Atlus-Script-Tools\Source\AtlusScriptLibrary\FlowScriptLanguage\Compiler\Parser\Grammar\FlowScript.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AtlusScriptLibrary.FlowScriptLanguage.Compiler.Parser.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class FlowScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, Import=33, Function=34, Global=35, Const=36, AiLocal=37, AiGlobal=38, 
		Bit=39, Enum=40, Out=41, Local=42, Count=43, If=44, Else=45, For=46, While=47, 
		Break=48, Continue=49, Return=50, Goto=51, Switch=52, Case=53, Default=54, 
		BoolLiteral=55, IntLiteral=56, FloatLiteral=57, StringLiteral=58, TypeIdentifier=59, 
		PrimitiveTypeIdentifier=60, Identifier=61, Whitespace=62, Newline=63, 
		BlockComment=64, LineComment=65;
	public const int
		RULE_compilationUnit = 0, RULE_importStatement = 1, RULE_statement = 2, 
		RULE_nullStatement = 3, RULE_compoundStatement = 4, RULE_declarationStatement = 5, 
		RULE_functionDeclarationStatement = 6, RULE_procedureDeclarationStatement = 7, 
		RULE_variableDeclarationStatement = 8, RULE_arraySignifier = 9, RULE_enumTypeDeclarationStatement = 10, 
		RULE_enumValueDeclaration = 11, RULE_enumValueList = 12, RULE_labelDeclarationStatement = 13, 
		RULE_variableModifier = 14, RULE_parameterList = 15, RULE_parameter = 16, 
		RULE_argumentList = 17, RULE_argument = 18, RULE_expressionList = 19, 
		RULE_expression = 20, RULE_primary = 21, RULE_constant = 22, RULE_ifStatement = 23, 
		RULE_forStatement = 24, RULE_whileStatement = 25, RULE_breakStatement = 26, 
		RULE_continueStatement = 27, RULE_returnStatement = 28, RULE_gotoStatement = 29, 
		RULE_switchStatement = 30, RULE_switchLabel = 31;
	public static readonly string[] ruleNames = {
		"compilationUnit", "importStatement", "statement", "nullStatement", "compoundStatement", 
		"declarationStatement", "functionDeclarationStatement", "procedureDeclarationStatement", 
		"variableDeclarationStatement", "arraySignifier", "enumTypeDeclarationStatement", 
		"enumValueDeclaration", "enumValueList", "labelDeclarationStatement", 
		"variableModifier", "parameterList", "parameter", "argumentList", "argument", 
		"expressionList", "expression", "primary", "constant", "ifStatement", 
		"forStatement", "whileStatement", "breakStatement", "continueStatement", 
		"returnStatement", "gotoStatement", "switchStatement", "switchLabel"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "';'", "'{'", "'}'", "'='", "'['", "']'", "','", "':'", 
		"'.'", "'--'", "'++'", "'!'", "'-'", "'*'", "'/'", "'%'", "'+'", "'<'", 
		"'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'", "'+='", "'-='", 
		"'*='", "'/='", "'%='", "'import'", "'function'", "'global'", "'const'", 
		"'ai_local'", "'ai_global'", "'bit'", "'enum'", "'out'", "'local'", "'count'", 
		"'if'", "'else'", "'for'", "'while'", "'break'", "'continue'", "'return'", 
		"'goto'", "'switch'", "'case'", "'default'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "Import", "Function", 
		"Global", "Const", "AiLocal", "AiGlobal", "Bit", "Enum", "Out", "Local", 
		"Count", "If", "Else", "For", "While", "Break", "Continue", "Return", 
		"Goto", "Switch", "Case", "Default", "BoolLiteral", "IntLiteral", "FloatLiteral", 
		"StringLiteral", "TypeIdentifier", "PrimitiveTypeIdentifier", "Identifier", 
		"Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FlowScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FlowScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FlowScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FlowScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(FlowScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext[] declarationStatement() {
			return GetRuleContexts<DeclarationStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement(int i) {
			return GetRuleContext<DeclarationStatementContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Import) {
				{
				{
				State = 64;
				importStatement();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2882319137500037120L) != 0)) {
				{
				{
				State = 70;
				declarationStatement();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 76;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(FlowScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(FlowScriptParser.StringLiteral, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(Import);
			State = 79;
			Match(T__0);
			State = 80;
			Match(StringLiteral);
			State = 81;
			Match(T__1);
			State = 82;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullStatementContext nullStatement() {
			return GetRuleContext<NullStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				nullStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85;
				compoundStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 86;
				declarationStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 87;
				expression(0);
				State = 88;
				Match(T__2);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 90;
				ifStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 91;
				forStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 92;
				whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 93;
				breakStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 94;
				continueStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 95;
				returnStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 96;
				gotoStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 97;
				switchStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullStatementContext : ParserRuleContext {
		public NullStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterNullStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitNullStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullStatementContext nullStatement() {
		NullStatementContext _localctx = new NullStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_nullStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(T__3);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3431705515481165850L) != 0)) {
				{
				{
				State = 103;
				statement();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 109;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationStatementContext functionDeclarationStatement() {
			return GetRuleContext<FunctionDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDeclarationStatementContext procedureDeclarationStatement() {
			return GetRuleContext<ProcedureDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeDeclarationStatementContext enumTypeDeclarationStatement() {
			return GetRuleContext<EnumTypeDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelDeclarationStatementContext labelDeclarationStatement() {
			return GetRuleContext<LabelDeclarationStatementContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_declarationStatement);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111;
				functionDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112;
				procedureDeclarationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 113;
				variableDeclarationStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 114;
				enumTypeDeclarationStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 115;
				labelDeclarationStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(FlowScriptParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntLiteral() { return GetToken(FlowScriptParser.IntLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeIdentifier() { return GetToken(FlowScriptParser.TypeIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterFunctionDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitFunctionDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationStatementContext functionDeclarationStatement() {
		FunctionDeclarationStatementContext _localctx = new FunctionDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(Function);
			State = 119;
			Match(T__0);
			State = 120;
			Match(IntLiteral);
			State = 121;
			Match(T__1);
			State = 122;
			Match(TypeIdentifier);
			State = 123;
			Match(Identifier);
			State = 124;
			parameterList();
			State = 125;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeIdentifier() { return GetToken(FlowScriptParser.TypeIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ProcedureDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterProcedureDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitProcedureDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclarationStatementContext procedureDeclarationStatement() {
		ProcedureDeclarationStatementContext _localctx = new ProcedureDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_procedureDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(TypeIdentifier);
			State = 128;
			Match(Identifier);
			State = 129;
			parameterList();
			State = 130;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeIdentifier() { return GetToken(FlowScriptParser.TypeIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier() {
			return GetRuleContext<VariableModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArraySignifierContext arraySignifier() {
			return GetRuleContext<ArraySignifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_variableDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14259291422720L) != 0)) {
				{
				State = 132;
				variableModifier();
				}
			}

			State = 135;
			Match(TypeIdentifier);
			State = 136;
			Match(Identifier);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 137;
				arraySignifier();
				}
			}

			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 140;
				Match(T__5);
				State = 141;
				expression(0);
				}
			}

			State = 144;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySignifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntLiteral() { return GetToken(FlowScriptParser.IntLiteral, 0); }
		public ArraySignifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySignifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterArraySignifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitArraySignifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySignifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySignifierContext arraySignifier() {
		ArraySignifierContext _localctx = new ArraySignifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_arraySignifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 146;
			Match(T__6);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IntLiteral) {
				{
				State = 147;
				Match(IntLiteral);
				}
			}

			State = 150;
			Match(T__7);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(FlowScriptParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueListContext enumValueList() {
			return GetRuleContext<EnumValueListContext>(0);
		}
		public EnumTypeDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterEnumTypeDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitEnumTypeDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeDeclarationStatementContext enumTypeDeclarationStatement() {
		EnumTypeDeclarationStatementContext _localctx = new EnumTypeDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumTypeDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(Enum);
			State = 153;
			Match(Identifier);
			State = 154;
			enumValueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumValueDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterEnumValueDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitEnumValueDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueDeclarationContext enumValueDeclaration() {
		EnumValueDeclarationContext _localctx = new EnumValueDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumValueDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(Identifier);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 157;
				Match(T__5);
				State = 158;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueDeclarationContext[] enumValueDeclaration() {
			return GetRuleContexts<EnumValueDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueDeclarationContext enumValueDeclaration(int i) {
			return GetRuleContext<EnumValueDeclarationContext>(i);
		}
		public EnumValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterEnumValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitEnumValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueListContext enumValueList() {
		EnumValueListContext _localctx = new EnumValueListContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumValueList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(T__3);
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 162;
				enumValueDeclaration();
				}
				break;
			}
			State = 170;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 165;
					enumValueDeclaration();
					State = 166;
					Match(T__8);
					}
					} 
				}
				State = 172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 173;
				enumValueDeclaration();
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8) {
					{
					State = 174;
					Match(T__8);
					}
				}

				}
			}

			State = 179;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public LabelDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterLabelDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitLabelDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelDeclarationStatementContext labelDeclarationStatement() {
		LabelDeclarationStatementContext _localctx = new LabelDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_labelDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(Identifier);
			State = 182;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(FlowScriptParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntLiteral() { return GetToken(FlowScriptParser.IntLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(FlowScriptParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AiLocal() { return GetToken(FlowScriptParser.AiLocal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AiGlobal() { return GetToken(FlowScriptParser.AiGlobal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bit() { return GetToken(FlowScriptParser.Bit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Count() { return GetToken(FlowScriptParser.Count, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(FlowScriptParser.Local, 0); }
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 28, RULE_variableModifier);
		int _la;
		try {
			State = 219;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				Match(Global);
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 185;
					Match(T__0);
					State = 186;
					Match(IntLiteral);
					State = 187;
					Match(T__1);
					}
				}

				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190;
				Match(Const);
				}
				break;
			case AiLocal:
				EnterOuterAlt(_localctx, 3);
				{
				State = 191;
				Match(AiLocal);
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 192;
					Match(T__0);
					State = 193;
					Match(IntLiteral);
					State = 194;
					Match(T__1);
					}
				}

				}
				break;
			case AiGlobal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 197;
				Match(AiGlobal);
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 198;
					Match(T__0);
					State = 199;
					Match(IntLiteral);
					State = 200;
					Match(T__1);
					}
				}

				}
				break;
			case Bit:
				EnterOuterAlt(_localctx, 5);
				{
				State = 203;
				Match(Bit);
				{
				State = 204;
				Match(T__0);
				State = 205;
				Match(IntLiteral);
				State = 206;
				Match(T__1);
				}
				}
				break;
			case Count:
				EnterOuterAlt(_localctx, 6);
				{
				State = 207;
				Match(Count);
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 208;
					Match(T__0);
					State = 209;
					Match(IntLiteral);
					State = 210;
					Match(T__1);
					}
				}

				}
				break;
			case Local:
				EnterOuterAlt(_localctx, 7);
				{
				State = 213;
				Match(Local);
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 214;
					Match(T__0);
					State = 215;
					Match(IntLiteral);
					State = 216;
					Match(T__1);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 30, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(T__0);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Out || _la==TypeIdentifier) {
				{
				State = 222;
				parameter();
				}
			}

			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 225;
				Match(T__8);
				State = 226;
				parameter();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 232;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeIdentifier() { return GetToken(FlowScriptParser.TypeIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Out() { return GetToken(FlowScriptParser.Out, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArraySignifierContext arraySignifier() {
			return GetRuleContext<ArraySignifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 32, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Out) {
				{
				State = 234;
				Match(Out);
				}
			}

			State = 237;
			Match(TypeIdentifier);
			State = 238;
			Match(Identifier);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 239;
				arraySignifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 34, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(T__0);
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2846277163521470490L) != 0)) {
				{
				State = 243;
				argument();
				}
			}

			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 246;
				Match(T__8);
				State = 247;
				argument();
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 253;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Out() { return GetToken(FlowScriptParser.Out, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 36, RULE_argument);
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__2:
			case T__3:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case BoolLiteral:
			case IntLiteral:
			case FloatLiteral:
			case StringLiteral:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				expression(0);
				}
				break;
			case Out:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256;
				Match(Out);
				State = 257;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 38, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(T__0);
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2846274964498214938L) != 0)) {
				{
				State = 261;
				expression(0);
				}
			}

			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 264;
				Match(T__8);
				State = 265;
				expression(0);
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 271;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InitializerListExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InitializerListExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterInitializerListExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitInitializerListExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerListExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		public IToken Op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubscriptExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubscriptExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterSubscriptExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitSubscriptExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPrefixExpressionContext : ExpressionContext {
		public IToken Op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryPrefixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterUnaryPrefixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitUnaryPrefixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPrefixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		public IToken Op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public IToken Op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public IToken Op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPostfixExpressionContext : ExpressionContext {
		public IToken Op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryPostfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterUnaryPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitUnaryPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeIdentifier() { return GetToken(FlowScriptParser.TypeIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompoundExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompoundExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCompoundExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCompoundExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullExpressionContext : ExpressionContext {
		public NullExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterNullExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitNullExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public IToken Op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(FlowScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(FlowScriptParser.Identifier, i);
		}
		public MemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				_localctx = new NullExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 274;
				Match(T__2);
				}
				break;
			case 2:
				{
				_localctx = new CompoundExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 275;
				Match(T__0);
				State = 276;
				expression(0);
				State = 277;
				Match(T__1);
				}
				break;
			case 3:
				{
				_localctx = new InitializerListExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 279;
				Match(T__3);
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2846274964498214938L) != 0)) {
					{
					State = 280;
					expression(0);
					}
				}

				State = 287;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 283;
						Match(T__8);
						State = 284;
						expression(0);
						}
						} 
					}
					State = 289;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8) {
					{
					State = 290;
					Match(T__8);
					}
				}

				State = 293;
				Match(T__4);
				}
				break;
			case 4:
				{
				_localctx = new SubscriptExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 294;
				Match(Identifier);
				State = 295;
				Match(T__6);
				State = 296;
				expression(0);
				State = 297;
				Match(T__7);
				}
				break;
			case 5:
				{
				_localctx = new MemberAccessExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 299;
				Match(Identifier);
				State = 300;
				Match(T__10);
				State = 301;
				Match(Identifier);
				}
				break;
			case 6:
				{
				_localctx = new CastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 302;
				Match(T__0);
				State = 303;
				Match(TypeIdentifier);
				State = 304;
				Match(T__1);
				State = 305;
				Match(T__0);
				State = 306;
				expression(0);
				State = 307;
				Match(T__1);
				}
				break;
			case 7:
				{
				_localctx = new CallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 309;
				Match(Identifier);
				State = 310;
				argumentList();
				}
				break;
			case 8:
				{
				_localctx = new UnaryPrefixExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 311;
				((UnaryPrefixExpressionContext)_localctx).Op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 61440L) != 0)) ) {
					((UnaryPrefixExpressionContext)_localctx).Op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 312;
				expression(9);
				}
				break;
			case 9:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 313;
				primary();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 341;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 339;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 316;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 317;
						((MultiplicationExpressionContext)_localctx).Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0)) ) {
							((MultiplicationExpressionContext)_localctx).Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 318;
						expression(9);
						}
						break;
					case 2:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 319;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 320;
						((AdditionExpressionContext)_localctx).Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__14 || _la==T__18) ) {
							((AdditionExpressionContext)_localctx).Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 321;
						expression(8);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 322;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 323;
						((RelationalExpressionContext)_localctx).Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15728640L) != 0)) ) {
							((RelationalExpressionContext)_localctx).Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 324;
						expression(7);
						}
						break;
					case 4:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 325;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 326;
						((EqualityExpressionContext)_localctx).Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__23 || _la==T__24) ) {
							((EqualityExpressionContext)_localctx).Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 327;
						expression(6);
						}
						break;
					case 5:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 328;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 329;
						Match(T__25);
						State = 330;
						expression(5);
						}
						break;
					case 6:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 331;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 332;
						Match(T__26);
						State = 333;
						expression(4);
						}
						break;
					case 7:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 334;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 335;
						((AssignmentExpressionContext)_localctx).Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8321499200L) != 0)) ) {
							((AssignmentExpressionContext)_localctx).Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 336;
						expression(3);
						}
						break;
					case 8:
						{
						_localctx = new UnaryPostfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 337;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 338;
						((UnaryPostfixExpressionContext)_localctx).Op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__11 || _la==T__12) ) {
							((UnaryPostfixExpressionContext)_localctx).Op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 343;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public IdentifierExpressionContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 42, RULE_primary);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BoolLiteral:
			case IntLiteral:
			case FloatLiteral:
			case StringLiteral:
				_localctx = new ConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 344;
				constant();
				}
				break;
			case Identifier:
				_localctx = new IdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 345;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolLiteral() { return GetToken(FlowScriptParser.BoolLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntLiteral() { return GetToken(FlowScriptParser.IntLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatLiteral() { return GetToken(FlowScriptParser.FloatLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(FlowScriptParser.StringLiteral, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 44, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 540431955284459520L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(FlowScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Else() { return GetTokens(FlowScriptParser.Else); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else(int i) {
			return GetToken(FlowScriptParser.Else, i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			Match(If);
			State = 351;
			Match(T__0);
			State = 352;
			expression(0);
			State = 353;
			Match(T__1);
			State = 354;
			statement();
			State = 359;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 355;
					Match(Else);
					State = 356;
					statement();
					}
					} 
				}
				State = 361;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(FlowScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(For);
			State = 363;
			Match(T__0);
			State = 364;
			statement();
			State = 365;
			expression(0);
			State = 366;
			Match(T__2);
			State = 367;
			expression(0);
			State = 368;
			Match(T__1);
			State = 369;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(FlowScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(While);
			State = 372;
			expression(0);
			State = 373;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(FlowScriptParser.Break, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			Match(Break);
			State = 376;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(FlowScriptParser.Continue, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(Continue);
			State = 379;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(FlowScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			Match(Return);
			State = 383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 382;
				expression(0);
				}
				break;
			}
			State = 385;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(FlowScriptParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(FlowScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(FlowScriptParser.Default, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_gotoStatement);
		try {
			State = 399;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 387;
				Match(Goto);
				State = 388;
				Match(Identifier);
				State = 389;
				Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 390;
				Match(Goto);
				State = 391;
				Match(Case);
				State = 392;
				expression(0);
				State = 393;
				Match(T__2);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 395;
				Match(Goto);
				State = 396;
				Match(Case);
				State = 397;
				Match(Default);
				State = 398;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(FlowScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(Switch);
			State = 402;
			Match(T__0);
			State = 403;
			expression(0);
			State = 404;
			Match(T__1);
			State = 405;
			Match(T__3);
			State = 407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 406;
				switchLabel();
				}
				}
				State = 409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case || _la==Default );
			State = 411;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(FlowScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(FlowScriptParser.Default, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 62, RULE_switchLabel);
		int _la;
		try {
			State = 430;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Case:
				EnterOuterAlt(_localctx, 1);
				{
				State = 413;
				Match(Case);
				State = 414;
				expression(0);
				State = 415;
				Match(T__9);
				State = 419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3431705515481165850L) != 0)) {
					{
					{
					State = 416;
					statement();
					}
					}
					State = 421;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 2);
				{
				State = 422;
				Match(Default);
				State = 423;
				Match(T__9);
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3431705515481165850L) != 0)) {
					{
					{
					State = 424;
					statement();
					}
					}
					State = 429;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 10);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,65,433,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,5,0,66,8,0,10,0,12,0,69,9,0,1,0,5,0,
		72,8,0,10,0,12,0,75,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,99,8,2,1,3,1,3,1,4,1,4,5,
		4,105,8,4,10,4,12,4,108,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,3,5,117,8,5,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,3,8,134,8,8,
		1,8,1,8,1,8,3,8,139,8,8,1,8,1,8,3,8,143,8,8,1,8,1,8,1,9,1,9,3,9,149,8,
		9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,3,11,160,8,11,1,12,1,12,3,
		12,164,8,12,1,12,1,12,1,12,5,12,169,8,12,10,12,12,12,172,9,12,1,12,1,12,
		3,12,176,8,12,3,12,178,8,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,
		14,3,14,189,8,14,1,14,1,14,1,14,1,14,1,14,3,14,196,8,14,1,14,1,14,1,14,
		1,14,3,14,202,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,212,8,
		14,1,14,1,14,1,14,1,14,3,14,218,8,14,3,14,220,8,14,1,15,1,15,3,15,224,
		8,15,1,15,1,15,5,15,228,8,15,10,15,12,15,231,9,15,1,15,1,15,1,16,3,16,
		236,8,16,1,16,1,16,1,16,3,16,241,8,16,1,17,1,17,3,17,245,8,17,1,17,1,17,
		5,17,249,8,17,10,17,12,17,252,9,17,1,17,1,17,1,18,1,18,1,18,3,18,259,8,
		18,1,19,1,19,3,19,263,8,19,1,19,1,19,5,19,267,8,19,10,19,12,19,270,9,19,
		1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,282,8,20,1,20,1,
		20,5,20,286,8,20,10,20,12,20,289,9,20,1,20,3,20,292,8,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,3,20,315,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,5,20,340,8,20,10,20,12,20,343,9,20,1,21,1,21,3,21,347,8,21,1,22,
		1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,358,8,23,10,23,12,23,361,
		9,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
		1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,3,28,384,8,28,1,28,1,28,1,29,1,
		29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,400,8,29,1,30,
		1,30,1,30,1,30,1,30,1,30,4,30,408,8,30,11,30,12,30,409,1,30,1,30,1,31,
		1,31,1,31,1,31,5,31,418,8,31,10,31,12,31,421,9,31,1,31,1,31,1,31,5,31,
		426,8,31,10,31,12,31,429,9,31,3,31,431,8,31,1,31,0,1,40,32,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
		60,62,0,8,1,0,12,15,1,0,16,18,2,0,15,15,19,19,1,0,20,23,1,0,24,25,2,0,
		6,6,28,32,1,0,12,13,1,0,55,58,475,0,67,1,0,0,0,2,78,1,0,0,0,4,98,1,0,0,
		0,6,100,1,0,0,0,8,102,1,0,0,0,10,116,1,0,0,0,12,118,1,0,0,0,14,127,1,0,
		0,0,16,133,1,0,0,0,18,146,1,0,0,0,20,152,1,0,0,0,22,156,1,0,0,0,24,161,
		1,0,0,0,26,181,1,0,0,0,28,219,1,0,0,0,30,221,1,0,0,0,32,235,1,0,0,0,34,
		242,1,0,0,0,36,258,1,0,0,0,38,260,1,0,0,0,40,314,1,0,0,0,42,346,1,0,0,
		0,44,348,1,0,0,0,46,350,1,0,0,0,48,362,1,0,0,0,50,371,1,0,0,0,52,375,1,
		0,0,0,54,378,1,0,0,0,56,381,1,0,0,0,58,399,1,0,0,0,60,401,1,0,0,0,62,430,
		1,0,0,0,64,66,3,2,1,0,65,64,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,
		1,0,0,0,68,73,1,0,0,0,69,67,1,0,0,0,70,72,3,10,5,0,71,70,1,0,0,0,72,75,
		1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,76,1,0,0,0,75,73,1,0,0,0,76,77,
		5,0,0,1,77,1,1,0,0,0,78,79,5,33,0,0,79,80,5,1,0,0,80,81,5,58,0,0,81,82,
		5,2,0,0,82,83,5,3,0,0,83,3,1,0,0,0,84,99,3,6,3,0,85,99,3,8,4,0,86,99,3,
		10,5,0,87,88,3,40,20,0,88,89,5,3,0,0,89,99,1,0,0,0,90,99,3,46,23,0,91,
		99,3,48,24,0,92,99,3,50,25,0,93,99,3,52,26,0,94,99,3,54,27,0,95,99,3,56,
		28,0,96,99,3,58,29,0,97,99,3,60,30,0,98,84,1,0,0,0,98,85,1,0,0,0,98,86,
		1,0,0,0,98,87,1,0,0,0,98,90,1,0,0,0,98,91,1,0,0,0,98,92,1,0,0,0,98,93,
		1,0,0,0,98,94,1,0,0,0,98,95,1,0,0,0,98,96,1,0,0,0,98,97,1,0,0,0,99,5,1,
		0,0,0,100,101,5,3,0,0,101,7,1,0,0,0,102,106,5,4,0,0,103,105,3,4,2,0,104,
		103,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,109,1,
		0,0,0,108,106,1,0,0,0,109,110,5,5,0,0,110,9,1,0,0,0,111,117,3,12,6,0,112,
		117,3,14,7,0,113,117,3,16,8,0,114,117,3,20,10,0,115,117,3,26,13,0,116,
		111,1,0,0,0,116,112,1,0,0,0,116,113,1,0,0,0,116,114,1,0,0,0,116,115,1,
		0,0,0,117,11,1,0,0,0,118,119,5,34,0,0,119,120,5,1,0,0,120,121,5,56,0,0,
		121,122,5,2,0,0,122,123,5,59,0,0,123,124,5,61,0,0,124,125,3,30,15,0,125,
		126,5,3,0,0,126,13,1,0,0,0,127,128,5,59,0,0,128,129,5,61,0,0,129,130,3,
		30,15,0,130,131,3,8,4,0,131,15,1,0,0,0,132,134,3,28,14,0,133,132,1,0,0,
		0,133,134,1,0,0,0,134,135,1,0,0,0,135,136,5,59,0,0,136,138,5,61,0,0,137,
		139,3,18,9,0,138,137,1,0,0,0,138,139,1,0,0,0,139,142,1,0,0,0,140,141,5,
		6,0,0,141,143,3,40,20,0,142,140,1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,
		0,144,145,5,3,0,0,145,17,1,0,0,0,146,148,5,7,0,0,147,149,5,56,0,0,148,
		147,1,0,0,0,148,149,1,0,0,0,149,150,1,0,0,0,150,151,5,8,0,0,151,19,1,0,
		0,0,152,153,5,40,0,0,153,154,5,61,0,0,154,155,3,24,12,0,155,21,1,0,0,0,
		156,159,5,61,0,0,157,158,5,6,0,0,158,160,3,40,20,0,159,157,1,0,0,0,159,
		160,1,0,0,0,160,23,1,0,0,0,161,163,5,4,0,0,162,164,3,22,11,0,163,162,1,
		0,0,0,163,164,1,0,0,0,164,170,1,0,0,0,165,166,3,22,11,0,166,167,5,9,0,
		0,167,169,1,0,0,0,168,165,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,
		171,1,0,0,0,171,177,1,0,0,0,172,170,1,0,0,0,173,175,3,22,11,0,174,176,
		5,9,0,0,175,174,1,0,0,0,175,176,1,0,0,0,176,178,1,0,0,0,177,173,1,0,0,
		0,177,178,1,0,0,0,178,179,1,0,0,0,179,180,5,5,0,0,180,25,1,0,0,0,181,182,
		5,61,0,0,182,183,5,10,0,0,183,27,1,0,0,0,184,188,5,35,0,0,185,186,5,1,
		0,0,186,187,5,56,0,0,187,189,5,2,0,0,188,185,1,0,0,0,188,189,1,0,0,0,189,
		220,1,0,0,0,190,220,5,36,0,0,191,195,5,37,0,0,192,193,5,1,0,0,193,194,
		5,56,0,0,194,196,5,2,0,0,195,192,1,0,0,0,195,196,1,0,0,0,196,220,1,0,0,
		0,197,201,5,38,0,0,198,199,5,1,0,0,199,200,5,56,0,0,200,202,5,2,0,0,201,
		198,1,0,0,0,201,202,1,0,0,0,202,220,1,0,0,0,203,204,5,39,0,0,204,205,5,
		1,0,0,205,206,5,56,0,0,206,220,5,2,0,0,207,211,5,43,0,0,208,209,5,1,0,
		0,209,210,5,56,0,0,210,212,5,2,0,0,211,208,1,0,0,0,211,212,1,0,0,0,212,
		220,1,0,0,0,213,217,5,42,0,0,214,215,5,1,0,0,215,216,5,56,0,0,216,218,
		5,2,0,0,217,214,1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,184,1,0,0,
		0,219,190,1,0,0,0,219,191,1,0,0,0,219,197,1,0,0,0,219,203,1,0,0,0,219,
		207,1,0,0,0,219,213,1,0,0,0,220,29,1,0,0,0,221,223,5,1,0,0,222,224,3,32,
		16,0,223,222,1,0,0,0,223,224,1,0,0,0,224,229,1,0,0,0,225,226,5,9,0,0,226,
		228,3,32,16,0,227,225,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,
		1,0,0,0,230,232,1,0,0,0,231,229,1,0,0,0,232,233,5,2,0,0,233,31,1,0,0,0,
		234,236,5,41,0,0,235,234,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,238,
		5,59,0,0,238,240,5,61,0,0,239,241,3,18,9,0,240,239,1,0,0,0,240,241,1,0,
		0,0,241,33,1,0,0,0,242,244,5,1,0,0,243,245,3,36,18,0,244,243,1,0,0,0,244,
		245,1,0,0,0,245,250,1,0,0,0,246,247,5,9,0,0,247,249,3,36,18,0,248,246,
		1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,253,1,0,0,
		0,252,250,1,0,0,0,253,254,5,2,0,0,254,35,1,0,0,0,255,259,3,40,20,0,256,
		257,5,41,0,0,257,259,5,61,0,0,258,255,1,0,0,0,258,256,1,0,0,0,259,37,1,
		0,0,0,260,262,5,1,0,0,261,263,3,40,20,0,262,261,1,0,0,0,262,263,1,0,0,
		0,263,268,1,0,0,0,264,265,5,9,0,0,265,267,3,40,20,0,266,264,1,0,0,0,267,
		270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,268,1,
		0,0,0,271,272,5,2,0,0,272,39,1,0,0,0,273,274,6,20,-1,0,274,315,5,3,0,0,
		275,276,5,1,0,0,276,277,3,40,20,0,277,278,5,2,0,0,278,315,1,0,0,0,279,
		281,5,4,0,0,280,282,3,40,20,0,281,280,1,0,0,0,281,282,1,0,0,0,282,287,
		1,0,0,0,283,284,5,9,0,0,284,286,3,40,20,0,285,283,1,0,0,0,286,289,1,0,
		0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,290,
		292,5,9,0,0,291,290,1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,315,5,
		5,0,0,294,295,5,61,0,0,295,296,5,7,0,0,296,297,3,40,20,0,297,298,5,8,0,
		0,298,315,1,0,0,0,299,300,5,61,0,0,300,301,5,11,0,0,301,315,5,61,0,0,302,
		303,5,1,0,0,303,304,5,59,0,0,304,305,5,2,0,0,305,306,5,1,0,0,306,307,3,
		40,20,0,307,308,5,2,0,0,308,315,1,0,0,0,309,310,5,61,0,0,310,315,3,34,
		17,0,311,312,7,0,0,0,312,315,3,40,20,9,313,315,3,42,21,0,314,273,1,0,0,
		0,314,275,1,0,0,0,314,279,1,0,0,0,314,294,1,0,0,0,314,299,1,0,0,0,314,
		302,1,0,0,0,314,309,1,0,0,0,314,311,1,0,0,0,314,313,1,0,0,0,315,341,1,
		0,0,0,316,317,10,8,0,0,317,318,7,1,0,0,318,340,3,40,20,9,319,320,10,7,
		0,0,320,321,7,2,0,0,321,340,3,40,20,8,322,323,10,6,0,0,323,324,7,3,0,0,
		324,340,3,40,20,7,325,326,10,5,0,0,326,327,7,4,0,0,327,340,3,40,20,6,328,
		329,10,4,0,0,329,330,5,26,0,0,330,340,3,40,20,5,331,332,10,3,0,0,332,333,
		5,27,0,0,333,340,3,40,20,4,334,335,10,2,0,0,335,336,7,5,0,0,336,340,3,
		40,20,3,337,338,10,10,0,0,338,340,7,6,0,0,339,316,1,0,0,0,339,319,1,0,
		0,0,339,322,1,0,0,0,339,325,1,0,0,0,339,328,1,0,0,0,339,331,1,0,0,0,339,
		334,1,0,0,0,339,337,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,341,342,1,
		0,0,0,342,41,1,0,0,0,343,341,1,0,0,0,344,347,3,44,22,0,345,347,5,61,0,
		0,346,344,1,0,0,0,346,345,1,0,0,0,347,43,1,0,0,0,348,349,7,7,0,0,349,45,
		1,0,0,0,350,351,5,44,0,0,351,352,5,1,0,0,352,353,3,40,20,0,353,354,5,2,
		0,0,354,359,3,4,2,0,355,356,5,45,0,0,356,358,3,4,2,0,357,355,1,0,0,0,358,
		361,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,47,1,0,0,0,361,359,1,0,
		0,0,362,363,5,46,0,0,363,364,5,1,0,0,364,365,3,4,2,0,365,366,3,40,20,0,
		366,367,5,3,0,0,367,368,3,40,20,0,368,369,5,2,0,0,369,370,3,4,2,0,370,
		49,1,0,0,0,371,372,5,47,0,0,372,373,3,40,20,0,373,374,3,4,2,0,374,51,1,
		0,0,0,375,376,5,48,0,0,376,377,5,3,0,0,377,53,1,0,0,0,378,379,5,49,0,0,
		379,380,5,3,0,0,380,55,1,0,0,0,381,383,5,50,0,0,382,384,3,40,20,0,383,
		382,1,0,0,0,383,384,1,0,0,0,384,385,1,0,0,0,385,386,5,3,0,0,386,57,1,0,
		0,0,387,388,5,51,0,0,388,389,5,61,0,0,389,400,5,3,0,0,390,391,5,51,0,0,
		391,392,5,53,0,0,392,393,3,40,20,0,393,394,5,3,0,0,394,400,1,0,0,0,395,
		396,5,51,0,0,396,397,5,53,0,0,397,398,5,54,0,0,398,400,5,3,0,0,399,387,
		1,0,0,0,399,390,1,0,0,0,399,395,1,0,0,0,400,59,1,0,0,0,401,402,5,52,0,
		0,402,403,5,1,0,0,403,404,3,40,20,0,404,405,5,2,0,0,405,407,5,4,0,0,406,
		408,3,62,31,0,407,406,1,0,0,0,408,409,1,0,0,0,409,407,1,0,0,0,409,410,
		1,0,0,0,410,411,1,0,0,0,411,412,5,5,0,0,412,61,1,0,0,0,413,414,5,53,0,
		0,414,415,3,40,20,0,415,419,5,10,0,0,416,418,3,4,2,0,417,416,1,0,0,0,418,
		421,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,431,1,0,0,0,421,419,1,
		0,0,0,422,423,5,54,0,0,423,427,5,10,0,0,424,426,3,4,2,0,425,424,1,0,0,
		0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,431,1,0,0,0,429,
		427,1,0,0,0,430,413,1,0,0,0,430,422,1,0,0,0,431,63,1,0,0,0,43,67,73,98,
		106,116,133,138,142,148,159,163,170,175,177,188,195,201,211,217,219,223,
		229,235,240,244,250,258,262,268,281,287,291,314,339,341,346,359,383,399,
		409,419,427,430
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AtlusScriptLibrary.FlowScriptLanguage.Compiler.Parser.Grammar
