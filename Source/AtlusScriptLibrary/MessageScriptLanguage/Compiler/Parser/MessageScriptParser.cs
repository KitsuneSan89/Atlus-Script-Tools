//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Paul\source\repos\Atlus-Script-Tools\Source\AtlusScriptLibrary\MessageScriptLanguage\Compiler\Parser\MessageScriptParser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AtlusScriptLibrary.MessageScriptLanguage.Compiler.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class MessageScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OpenCode=1, CloseText=2, Text=3, MessageDialogTagId=4, SelectionDialogTagId=5, 
		SelectionDialogPatternId=6, CloseCode=7, OpenText=8, IntLiteral=9, Identifier=10, 
		Whitespace=11;
	public const int
		RULE_compilationUnit = 0, RULE_dialog = 1, RULE_messageDialog = 2, RULE_speakerName = 3, 
		RULE_selectionDialog = 4, RULE_selectionDialogPattern = 5, RULE_tokenText = 6, 
		RULE_token = 7, RULE_expression = 8;
	public static readonly string[] ruleNames = {
		"compilationUnit", "dialog", "messageDialog", "speakerName", "selectionDialog", 
		"selectionDialogPattern", "tokenText", "token", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'sel'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OpenCode", "CloseText", "Text", "MessageDialogTagId", "SelectionDialogTagId", 
		"SelectionDialogPatternId", "CloseCode", "OpenText", "IntLiteral", "Identifier", 
		"Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MessageScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MessageScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MessageScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MessageScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MessageScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DialogContext[] dialog() {
			return GetRuleContexts<DialogContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DialogContext dialog(int i) {
			return GetRuleContext<DialogContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMessageScriptParserVisitor<TResult> typedVisitor = visitor as IMessageScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OpenCode || _la==Text) {
				{
				{
				State = 18;
				dialog();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 24;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DialogContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageDialogContext messageDialog() {
			return GetRuleContext<MessageDialogContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionDialogContext selectionDialog() {
			return GetRuleContext<SelectionDialogContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Text() { return GetTokens(MessageScriptParser.Text); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text(int i) {
			return GetToken(MessageScriptParser.Text, i);
		}
		public DialogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.EnterDialog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.ExitDialog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMessageScriptParserVisitor<TResult> typedVisitor = visitor as IMessageScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DialogContext dialog() {
		DialogContext _localctx = new DialogContext(Context, State);
		EnterRule(_localctx, 2, RULE_dialog);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Text) {
				{
				{
				State = 26;
				Match(Text);
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 34;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 32;
				messageDialog();
				}
				break;
			case 2:
				{
				State = 33;
				selectionDialog();
				}
				break;
			}
			State = 39;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 36;
					Match(Text);
					}
					} 
				}
				State = 41;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageDialogContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenCode() { return GetToken(MessageScriptParser.OpenCode, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MessageDialogTagId() { return GetToken(MessageScriptParser.MessageDialogTagId, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MessageScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseCode() { return GetToken(MessageScriptParser.CloseCode, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TokenTextContext tokenText() {
			return GetRuleContext<TokenTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpeakerNameContext speakerName() {
			return GetRuleContext<SpeakerNameContext>(0);
		}
		public MessageDialogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageDialog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.EnterMessageDialog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.ExitMessageDialog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMessageScriptParserVisitor<TResult> typedVisitor = visitor as IMessageScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageDialog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageDialogContext messageDialog() {
		MessageDialogContext _localctx = new MessageDialogContext(Context, State);
		EnterRule(_localctx, 4, RULE_messageDialog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(OpenCode);
			State = 43;
			Match(MessageDialogTagId);
			State = 44;
			Match(Identifier);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenText) {
				{
				State = 45;
				speakerName();
				}
			}

			State = 48;
			Match(CloseCode);
			State = 49;
			tokenText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpeakerNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenText() { return GetToken(MessageScriptParser.OpenText, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TokenTextContext tokenText() {
			return GetRuleContext<TokenTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseText() { return GetToken(MessageScriptParser.CloseText, 0); }
		public SpeakerNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_speakerName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.EnterSpeakerName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.ExitSpeakerName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMessageScriptParserVisitor<TResult> typedVisitor = visitor as IMessageScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpeakerName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpeakerNameContext speakerName() {
		SpeakerNameContext _localctx = new SpeakerNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_speakerName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(OpenText);
			State = 52;
			tokenText();
			State = 53;
			Match(CloseText);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionDialogContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenCode() { return GetToken(MessageScriptParser.OpenCode, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SelectionDialogTagId() { return GetToken(MessageScriptParser.SelectionDialogTagId, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MessageScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseCode() { return GetToken(MessageScriptParser.CloseCode, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TokenTextContext tokenText() {
			return GetRuleContext<TokenTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionDialogPatternContext selectionDialogPattern() {
			return GetRuleContext<SelectionDialogPatternContext>(0);
		}
		public SelectionDialogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionDialog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.EnterSelectionDialog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.ExitSelectionDialog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMessageScriptParserVisitor<TResult> typedVisitor = visitor as IMessageScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionDialog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionDialogContext selectionDialog() {
		SelectionDialogContext _localctx = new SelectionDialogContext(Context, State);
		EnterRule(_localctx, 8, RULE_selectionDialog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(OpenCode);
			State = 56;
			Match(SelectionDialogTagId);
			State = 57;
			Match(Identifier);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SelectionDialogPatternId || _la==IntLiteral) {
				{
				State = 58;
				selectionDialogPattern();
				}
			}

			State = 61;
			Match(CloseCode);
			State = 62;
			tokenText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionDialogPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntLiteral() { return GetToken(MessageScriptParser.IntLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SelectionDialogPatternId() { return GetToken(MessageScriptParser.SelectionDialogPatternId, 0); }
		public SelectionDialogPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionDialogPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.EnterSelectionDialogPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.ExitSelectionDialogPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMessageScriptParserVisitor<TResult> typedVisitor = visitor as IMessageScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionDialogPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionDialogPatternContext selectionDialogPattern() {
		SelectionDialogPatternContext _localctx = new SelectionDialogPatternContext(Context, State);
		EnterRule(_localctx, 10, RULE_selectionDialogPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			_la = TokenStream.LA(1);
			if ( !(_la==SelectionDialogPatternId || _la==IntLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TokenContext[] token() {
			return GetRuleContexts<TokenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenContext token(int i) {
			return GetRuleContext<TokenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Text() { return GetTokens(MessageScriptParser.Text); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text(int i) {
			return GetToken(MessageScriptParser.Text, i);
		}
		public TokenTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokenText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.EnterTokenText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.ExitTokenText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMessageScriptParserVisitor<TResult> typedVisitor = visitor as IMessageScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokenText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokenTextContext tokenText() {
		TokenTextContext _localctx = new TokenTextContext(Context, State);
		EnterRule(_localctx, 12, RULE_tokenText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 68;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OpenCode:
						{
						State = 66;
						token();
						}
						break;
					case Text:
						{
						State = 67;
						Match(Text);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 72;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenCode() { return GetToken(MessageScriptParser.OpenCode, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MessageScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseCode() { return GetToken(MessageScriptParser.CloseCode, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.EnterToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.ExitToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMessageScriptParserVisitor<TResult> typedVisitor = visitor as IMessageScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokenContext token() {
		TokenContext _localctx = new TokenContext(Context, State);
		EnterRule(_localctx, 14, RULE_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(OpenCode);
			State = 74;
			Match(Identifier);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IntLiteral || _la==Identifier) {
				{
				{
				State = 75;
				expression();
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 81;
			Match(CloseCode);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntLiteral() { return GetToken(MessageScriptParser.IntLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MessageScriptParser.Identifier, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMessageScriptParserListener typedListener = listener as IMessageScriptParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMessageScriptParserVisitor<TResult> typedVisitor = visitor as IMessageScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			_la = TokenStream.LA(1);
			if ( !(_la==IntLiteral || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,11,86,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,1,0,5,0,20,8,0,10,0,12,0,23,9,0,1,0,1,0,1,1,5,1,28,8,1,10,
		1,12,1,31,9,1,1,1,1,1,3,1,35,8,1,1,1,5,1,38,8,1,10,1,12,1,41,9,1,1,2,1,
		2,1,2,1,2,3,2,47,8,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,3,4,60,
		8,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,5,6,69,8,6,10,6,12,6,72,9,6,1,7,1,7,1,
		7,5,7,77,8,7,10,7,12,7,80,9,7,1,7,1,7,1,8,1,8,1,8,0,0,9,0,2,4,6,8,10,12,
		14,16,0,2,2,0,6,6,9,9,1,0,9,10,85,0,21,1,0,0,0,2,29,1,0,0,0,4,42,1,0,0,
		0,6,51,1,0,0,0,8,55,1,0,0,0,10,64,1,0,0,0,12,70,1,0,0,0,14,73,1,0,0,0,
		16,83,1,0,0,0,18,20,3,2,1,0,19,18,1,0,0,0,20,23,1,0,0,0,21,19,1,0,0,0,
		21,22,1,0,0,0,22,24,1,0,0,0,23,21,1,0,0,0,24,25,5,0,0,1,25,1,1,0,0,0,26,
		28,5,3,0,0,27,26,1,0,0,0,28,31,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,
		34,1,0,0,0,31,29,1,0,0,0,32,35,3,4,2,0,33,35,3,8,4,0,34,32,1,0,0,0,34,
		33,1,0,0,0,35,39,1,0,0,0,36,38,5,3,0,0,37,36,1,0,0,0,38,41,1,0,0,0,39,
		37,1,0,0,0,39,40,1,0,0,0,40,3,1,0,0,0,41,39,1,0,0,0,42,43,5,1,0,0,43,44,
		5,4,0,0,44,46,5,10,0,0,45,47,3,6,3,0,46,45,1,0,0,0,46,47,1,0,0,0,47,48,
		1,0,0,0,48,49,5,7,0,0,49,50,3,12,6,0,50,5,1,0,0,0,51,52,5,8,0,0,52,53,
		3,12,6,0,53,54,5,2,0,0,54,7,1,0,0,0,55,56,5,1,0,0,56,57,5,5,0,0,57,59,
		5,10,0,0,58,60,3,10,5,0,59,58,1,0,0,0,59,60,1,0,0,0,60,61,1,0,0,0,61,62,
		5,7,0,0,62,63,3,12,6,0,63,9,1,0,0,0,64,65,7,0,0,0,65,11,1,0,0,0,66,69,
		3,14,7,0,67,69,5,3,0,0,68,66,1,0,0,0,68,67,1,0,0,0,69,72,1,0,0,0,70,68,
		1,0,0,0,70,71,1,0,0,0,71,13,1,0,0,0,72,70,1,0,0,0,73,74,5,1,0,0,74,78,
		5,10,0,0,75,77,3,16,8,0,76,75,1,0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,
		1,0,0,0,79,81,1,0,0,0,80,78,1,0,0,0,81,82,5,7,0,0,82,15,1,0,0,0,83,84,
		7,1,0,0,84,17,1,0,0,0,9,21,29,34,39,46,59,68,70,78
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AtlusScriptLibrary.MessageScriptLanguage.Compiler.Parser
