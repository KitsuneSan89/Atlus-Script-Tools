//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Paul\source\repos\Atlus-Script-Tools\Source\AtlusScriptLibrary\MessageScriptLanguage\Compiler\Parser\MessageScriptLexer.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AtlusScriptLibrary.MessageScriptLanguage.Compiler.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class MessageScriptLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OpenCode=1, CloseText=2, Text=3, MessageDialogTagId=4, SelectionDialogTagId=5, 
		SelectionDialogPatternId=6, CloseCode=7, OpenText=8, IntLiteral=9, Identifier=10, 
		Whitespace=11;
	public const int
		MessageScriptCode=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "MessageScriptCode"
	};

	public static readonly string[] ruleNames = {
		"OpenCode", "CloseText", "Text", "MessageDialogTagId", "SelectionDialogTagId", 
		"SelectionDialogPatternId", "CloseCode", "OpenText", "IdentifierEscape", 
		"IntLiteral", "Identifier", "DecIntLiteral", "HexIntLiteral", "Letter", 
		"Digit", "HexDigit", "HexLiteralPrefix", "Sign", "Whitespace"
	};


	public MessageScriptLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MessageScriptLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'sel'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OpenCode", "CloseText", "Text", "MessageDialogTagId", "SelectionDialogTagId", 
		"SelectionDialogPatternId", "CloseCode", "OpenText", "IntLiteral", "Identifier", 
		"Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MessageScriptLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MessageScriptLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,11,148,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,0,1,1,
		1,1,1,1,1,1,1,2,4,2,50,8,2,11,2,12,2,51,1,3,1,3,1,3,1,3,1,3,1,3,3,3,60,
		8,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,75,8,5,1,6,
		1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,3,9,90,8,9,1,10,1,10,3,
		10,94,8,10,1,10,1,10,1,10,5,10,99,8,10,10,10,12,10,102,9,10,1,10,1,10,
		5,10,106,8,10,10,10,12,10,109,9,10,1,10,1,10,3,10,113,8,10,1,11,3,11,116,
		8,11,1,11,4,11,119,8,11,11,11,12,11,120,1,12,3,12,124,8,12,1,12,1,12,4,
		12,128,8,12,11,12,12,12,129,1,13,1,13,1,14,1,14,1,15,1,15,3,15,138,8,15,
		1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,0,0,19,2,1,4,2,6,3,8,4,10,
		5,12,6,14,7,16,8,18,0,20,9,22,10,24,0,26,0,28,0,30,0,32,0,34,0,36,0,38,
		11,2,0,1,8,2,0,91,91,93,93,1,0,96,96,2,0,65,90,97,122,1,0,48,57,2,0,65,
		70,97,102,2,0,88,88,120,120,2,0,43,43,45,45,3,0,9,10,13,13,32,32,153,0,
		2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,1,8,1,0,0,0,1,10,1,0,0,0,1,12,1,0,0,
		0,1,14,1,0,0,0,1,16,1,0,0,0,1,20,1,0,0,0,1,22,1,0,0,0,1,38,1,0,0,0,2,40,
		1,0,0,0,4,44,1,0,0,0,6,49,1,0,0,0,8,59,1,0,0,0,10,61,1,0,0,0,12,74,1,0,
		0,0,14,76,1,0,0,0,16,80,1,0,0,0,18,84,1,0,0,0,20,89,1,0,0,0,22,112,1,0,
		0,0,24,115,1,0,0,0,26,123,1,0,0,0,28,131,1,0,0,0,30,133,1,0,0,0,32,137,
		1,0,0,0,34,139,1,0,0,0,36,142,1,0,0,0,38,144,1,0,0,0,40,41,5,91,0,0,41,
		42,1,0,0,0,42,43,6,0,0,0,43,3,1,0,0,0,44,45,5,93,0,0,45,46,1,0,0,0,46,
		47,6,1,0,0,47,5,1,0,0,0,48,50,8,0,0,0,49,48,1,0,0,0,50,51,1,0,0,0,51,49,
		1,0,0,0,51,52,1,0,0,0,52,7,1,0,0,0,53,54,5,109,0,0,54,55,5,115,0,0,55,
		60,5,103,0,0,56,57,5,100,0,0,57,58,5,108,0,0,58,60,5,103,0,0,59,53,1,0,
		0,0,59,56,1,0,0,0,60,9,1,0,0,0,61,62,5,115,0,0,62,63,5,101,0,0,63,64,5,
		108,0,0,64,11,1,0,0,0,65,66,5,116,0,0,66,67,5,111,0,0,67,75,5,112,0,0,
		68,69,5,98,0,0,69,70,5,111,0,0,70,71,5,116,0,0,71,72,5,116,0,0,72,73,5,
		111,0,0,73,75,5,109,0,0,74,65,1,0,0,0,74,68,1,0,0,0,75,13,1,0,0,0,76,77,
		5,93,0,0,77,78,1,0,0,0,78,79,6,6,1,0,79,15,1,0,0,0,80,81,5,91,0,0,81,82,
		1,0,0,0,82,83,6,7,1,0,83,17,1,0,0,0,84,85,5,96,0,0,85,86,5,96,0,0,86,19,
		1,0,0,0,87,90,3,24,11,0,88,90,3,26,12,0,89,87,1,0,0,0,89,88,1,0,0,0,90,
		21,1,0,0,0,91,94,3,28,13,0,92,94,5,95,0,0,93,91,1,0,0,0,93,92,1,0,0,0,
		94,100,1,0,0,0,95,99,3,28,13,0,96,99,5,95,0,0,97,99,3,30,14,0,98,95,1,
		0,0,0,98,96,1,0,0,0,98,97,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,
		1,0,0,0,101,113,1,0,0,0,102,100,1,0,0,0,103,107,3,18,8,0,104,106,8,1,0,
		0,105,104,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,
		110,1,0,0,0,109,107,1,0,0,0,110,111,3,18,8,0,111,113,1,0,0,0,112,93,1,
		0,0,0,112,103,1,0,0,0,113,23,1,0,0,0,114,116,3,36,17,0,115,114,1,0,0,0,
		115,116,1,0,0,0,116,118,1,0,0,0,117,119,3,30,14,0,118,117,1,0,0,0,119,
		120,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,25,1,0,0,0,122,124,3,36,
		17,0,123,122,1,0,0,0,123,124,1,0,0,0,124,125,1,0,0,0,125,127,3,34,16,0,
		126,128,3,32,15,0,127,126,1,0,0,0,128,129,1,0,0,0,129,127,1,0,0,0,129,
		130,1,0,0,0,130,27,1,0,0,0,131,132,7,2,0,0,132,29,1,0,0,0,133,134,7,3,
		0,0,134,31,1,0,0,0,135,138,3,30,14,0,136,138,7,4,0,0,137,135,1,0,0,0,137,
		136,1,0,0,0,138,33,1,0,0,0,139,140,5,48,0,0,140,141,7,5,0,0,141,35,1,0,
		0,0,142,143,7,6,0,0,143,37,1,0,0,0,144,145,7,7,0,0,145,146,1,0,0,0,146,
		147,6,18,2,0,147,39,1,0,0,0,16,0,1,51,59,74,89,93,98,100,107,112,115,120,
		123,129,137,3,5,1,0,4,0,0,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AtlusScriptLibrary.MessageScriptLanguage.Compiler.Parser
